[{"/Users/rajeski/Documents/c19/src/index.js":"1","/Users/rajeski/Documents/c19/src/App.js":"2","/Users/rajeski/Documents/c19/src/components/index.js":"3","/Users/rajeski/Documents/c19/src/components/CountryPicker/CountryPicker.jsx":"4","/Users/rajeski/Documents/c19/src/components/Cards/Cards.jsx":"5","/Users/rajeski/Documents/c19/src/components/Chart/Chart.jsx":"6","/Users/rajeski/Documents/c19/src/api/index.js":"7"},{"size":147,"mtime":1607612423946,"results":"8","hashOfConfig":"9"},{"size":924,"mtime":1607878420042,"results":"10","hashOfConfig":"9"},{"size":173,"mtime":1607614460921,"results":"11","hashOfConfig":"9"},{"size":955,"mtime":1607878087242,"results":"12","hashOfConfig":"9"},{"size":2669,"mtime":1607784450453,"results":"13","hashOfConfig":"9"},{"size":1438,"mtime":1607791397887,"results":"14","hashOfConfig":"9"},{"size":1099,"mtime":1607878089679,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1hp4zaw",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/rajeski/Documents/c19/src/index.js",[],["33","34"],"/Users/rajeski/Documents/c19/src/App.js",[],"/Users/rajeski/Documents/c19/src/components/index.js",[],"/Users/rajeski/Documents/c19/src/components/CountryPicker/CountryPicker.jsx",["35"],"/Users/rajeski/Documents/c19/src/components/Cards/Cards.jsx",["36"],"import { configure } from '@testing-library/react';\nimport React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'; \nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed) {\n        return 'Loading... ';\n    }\n    \n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify='center'>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\n                        <Typography variant='h5'>\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=',' /> \n                            </Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of active COVID-19 Cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n                        <Typography variant='h5'>\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=',' /> \n                            </Typography>\n                            <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of recovered from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n                        <Typography variant='h5'>\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=',' /> \n                            </Typography>\n                            <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                    </Grid>\n                </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","/Users/rajeski/Documents/c19/src/components/Chart/Chart.jsx",["37"],"import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = () => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n    });\n\n    const lineChart = (\n        dailyData.length \n        ? (\n            <Line \n            data={{\n            labels: dailyData.map(({ date }) => date),\n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n            }, {\n                data: dailyData.map(({ deaths }) => deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n            // }, {\n            //     data: dailyData.map(({ deaths }) => deaths),\n            //     lables: 'Recovered',\n            //     borderColor: 'green',\n            //     backgroundColor: 'rgba(0, 255, 0, 0.5)',\n            //     fill: true,        \n            }],\n        }}\n        />) : null  \n    );\n\n    return (\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","/Users/rajeski/Documents/c19/src/api/index.js",["38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":2,"column":37,"nodeType":"45","messageId":"46","endLine":2,"endColumn":51},{"ruleId":"43","severity":1,"message":"47","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":19},{"ruleId":"43","severity":1,"message":"48","line":3,"column":16,"nodeType":"45","messageId":"46","endLine":3,"endColumn":19},{"ruleId":"43","severity":1,"message":"49","line":15,"column":15,"nodeType":"45","messageId":"46","endLine":15,"endColumn":27},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'StylesProvider' is defined but never used.","Identifier","unusedVar","'configure' is defined but never used.","'Bar' is defined but never used.","'modifiedData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]